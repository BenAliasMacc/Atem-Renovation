{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raymo\\\\Desktop\\\\atem-main\\\\src\\\\components\\\\Questions\\\\Components\\\\Questions.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport './Questions.css';\nimport questionsData from '../Data/data.json';\nimport { Footer } from './Footer';\nimport Compteur from './Compteur';\nimport closeButton from \"../Assets/closeButton.svg\";\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Questions = ({\n  setOpen\n}) => {\n  _s();\n\n  //const { register, handleSubmit } = useForm()\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const data = questionsData.data[activeQuestion];\n  const length = data.choices.length;\n  const numberOfQuestions = questionsData.data.length;\n  const [inputValue, setInputValue] = useState('');\n  const [selected, setSelected] = useState('');\n  const [selected2, setSelected2] = useState('');\n  const [error, setError] = useState('');\n  const radiosWrapper = useRef();\n  useEffect(() => {\n    const findCheckedInput = data.inputType === \"radio\" && radiosWrapper.current.querySelector('input:checked');\n\n    if (findCheckedInput) {\n      findCheckedInput.checked = false;\n    }\n  }, [data]);\n  const [answer, setAnswer] = useState([]);\n\n  const changeRadioHandler = e => {\n    setSelected(e.target.value);\n\n    if (error) {\n      setError('');\n    }\n  };\n\n  const changeInput1Handler = e => {\n    setSelected(e.target.value);\n\n    if (error) {\n      setError('');\n    }\n  };\n\n  const changeInput2Handler = e => {\n    setSelected2(e.target.value);\n\n    if (error) {\n      setError('');\n    }\n  };\n\n  console.log(answer);\n\n  const closeModal = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formulaire-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"formulaire\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question__title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: data.titre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), data.description && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: data.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), data.inputType === \"radio\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${length === 2 ? 'question__choices' : 'question__choices--small-card'} control`,\n        ref: radiosWrapper,\n        children: data.choices.map((choice, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${length === 2 ? 'question__choices__choice' : 'question__choices__choice--small-card'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: choice.name,\n            children: [choice.image && /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"radio-image\",\n              src: choice.image,\n              alt: choice.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 50\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: choice.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"radio\",\n            type: \"radio\",\n            name: \"answer\",\n            id: choice.name,\n            value: choice.name,\n            onChange: changeRadioHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 48\n      }, this), data.inputType !== \"radio\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: data.inputs[0].inputType,\n          placeholder: data.inputs[0].placeholder,\n          onChange: changeInput1Handler,\n          value: inputValue.input1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), data.inputs[1] && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: data.inputs[1].inputType,\n          placeholder: data.inputs[1].placeholder,\n          onChange: changeInput2Handler,\n          value: inputValue.input2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Footer, {\n        data: data,\n        numberOfQuestions: numberOfQuestions,\n        error: error,\n        setError: setError,\n        activeQuestion: activeQuestion,\n        onSetActiveQuestion: setActiveQuestion,\n        selected: selected,\n        setSelected: setSelected,\n        selected2: selected2,\n        setSelected2: setSelected,\n        inputValue: inputValue,\n        setInputValue: setInputValue,\n        setAnswer: setAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Compteur, {\n        activeQuestion: activeQuestion,\n        numberOfQuestions: numberOfQuestions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"closeButton\",\n        onClick: closeModal,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: closeButton,\n          alt: \"fermeture modale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 67\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Questions, \"RiMdohe22QKS8IxYYS5nPxNHl4I=\");\n\n_c = Questions;\nexport default Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"sources":["C:/Users/raymo/Desktop/atem-main/src/components/Questions/Components/Questions.jsx"],"names":["React","useRef","useState","useEffect","questionsData","Footer","Compteur","useForm","Questions","setOpen","activeQuestion","setActiveQuestion","data","length","choices","numberOfQuestions","inputValue","setInputValue","selected","setSelected","selected2","setSelected2","error","setError","radiosWrapper","findCheckedInput","inputType","current","querySelector","checked","answer","setAnswer","changeRadioHandler","e","target","value","changeInput1Handler","changeInput2Handler","console","log","closeModal","titre","description","map","choice","index","name","image","inputs","placeholder","input1","input2","closeButton"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\nimport './Questions.css'\r\nimport questionsData from '../Data/data.json'\r\nimport { Footer } from './Footer'\r\nimport Compteur from './Compteur'\r\nimport closeButton from '../Assets/closeButton.svg'\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst Questions = ({setOpen}) => {\r\n\r\n    \r\n    //const { register, handleSubmit } = useForm()\r\n\r\n    const [activeQuestion, setActiveQuestion] = useState(0);\r\n    const data = questionsData.data[activeQuestion]\r\n    const length = data.choices.length\r\n    const numberOfQuestions = questionsData.data.length\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [selected, setSelected] = useState('');\r\n    const [selected2, setSelected2] = useState('');\r\n    const [error, setError] = useState('');\r\n    const radiosWrapper = useRef();\r\n    \r\n\r\n    useEffect(() => {\r\n      const findCheckedInput = data.inputType === \"radio\" && radiosWrapper.current.querySelector('input:checked');\r\n      if(findCheckedInput) {\r\n        findCheckedInput.checked = false;\r\n      }\r\n    }, [data]);\r\n\r\n    const [answer, setAnswer] = useState([])\r\n\r\n    \r\n    const changeRadioHandler = (e) => {\r\n        setSelected(e.target.value);\r\n        if(error) {\r\n            setError('');\r\n        }\r\n    };\r\n\r\n    const changeInput1Handler = (e) => {\r\n        setSelected(e.target.value);\r\n        if(error) {\r\n            setError('');\r\n        }\r\n    };\r\n\r\n    const changeInput2Handler = (e) => {\r\n        setSelected2(e.target.value);\r\n        if(error) {\r\n            setError('');\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    console.log(answer);\r\n\r\n    const closeModal = () => {\r\n        setOpen(false)\r\n    };\r\n\r\n    return (\r\n        <div className='formulaire-wrapper'>\r\n            <form className='formulaire'>\r\n                <div className='question__title'>\r\n                    <h2>{data.titre}</h2>\r\n                    {data.description && <p>{data.description}</p>}\r\n                </div>\r\n\r\n                {/* input radio */}\r\n                {data.inputType === \"radio\" && <div className={`${length === 2 ? 'question__choices' : 'question__choices--small-card'} control`} ref={radiosWrapper}>\r\n                    {data.choices.map((choice, index) => (\r\n                        <div className={`${length === 2 ? 'question__choices__choice' : 'question__choices__choice--small-card'}`} key={index}>\r\n                            <label htmlFor={choice.name}>\r\n                                {choice.image && <img className='radio-image' src={choice.image} alt={choice.name}/>}\r\n                                <p>{choice.name}</p>\r\n                            </label>\r\n                            <input className='radio' type=\"radio\" name=\"answer\" id={choice.name} value={choice.name} onChange={changeRadioHandler} />\r\n                        </div>\r\n                    ))}\r\n                </div>}\r\n\r\n                {data.inputType !== \"radio\" && (\r\n                    <>\r\n                        <input type={data.inputs[0].inputType} placeholder={data.inputs[0].placeholder} onChange={changeInput1Handler} value={inputValue.input1} />\r\n                        {/* En cas de 2eme champ à compléter */}\r\n                        {data.inputs[1] && <input type={data.inputs[1].inputType} placeholder={data.inputs[1].placeholder} onChange={changeInput2Handler} value={inputValue.input2}/>}\r\n                    </>\r\n                )}\r\n                \r\n                <Footer data={data} numberOfQuestions={numberOfQuestions} error={error} setError={setError} activeQuestion={activeQuestion} onSetActiveQuestion={setActiveQuestion} selected={selected} setSelected={setSelected} selected2={selected2} setSelected2={setSelected} inputValue={inputValue} setInputValue={setInputValue} setAnswer={setAnswer}/>\r\n\r\n                <Compteur activeQuestion={activeQuestion} numberOfQuestions={numberOfQuestions}/>\r\n\r\n                <div className='closeButton' onClick={closeModal}><img src={closeButton} alt='fermeture modale'/></div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Questions"]},"metadata":{},"sourceType":"module"}