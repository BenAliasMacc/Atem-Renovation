{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raymo\\\\Desktop\\\\atem-main\\\\src\\\\components\\\\Pages\\\\Questions\\\\Components\\\\Questions.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport './Questions.css';\nimport questionsData from '../Data/data.json';\nimport { Footer } from './Footer';\nimport Compteur from './Compteur';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Questions = () => {\n  _s();\n\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const data = questionsData.data[activeQuestion];\n  const length = data.choices.length;\n  const numberOfQuestions = questionsData.data.length;\n  const [selected, setSelected] = useState('');\n  const [error, setError] = useState('');\n  const [inputValue, setInputValue] = useState({\n    input1: \"\",\n    input2: \"\"\n  });\n  const radiosWrapper = useRef(); // useEffect(() => {\n  //   const findCheckedInput = data.inputType === \"radio\" && radiosWrapper.current.querySelector('input:checked');\n  //   if(findCheckedInput) {\n  //     findCheckedInput.checked = false;\n  //   }\n  // }, [data]);\n\n  const changeRadioHandler = e => {\n    setSelected(e.target.value);\n\n    if (error) {\n      setError('');\n    }\n  }; // const changeInputHandler = (e) => {\n  //     setInputValue([\n  //         {input: e.target.value},\n  //         {input: e.target.value}\n  //     ]);\n  //     if(error) {\n  //         setError('');\n  //     }\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"formulaire\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question__title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: data.titre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), data.description && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: data.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), data.inputType === \"radio\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${length === 2 ? 'question__choices' : 'question__choices--small-card'} control`,\n      ref: radiosWrapper,\n      children: data.choices.map((choice, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${length === 2 ? 'question__choices__choice' : 'question__choices__choice--small-card'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: choice.name,\n          children: [choice.image && /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"radio-image\",\n            src: choice.image,\n            alt: choice.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 46\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: choice.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"radio\",\n          type: \"radio\",\n          name: \"answer\",\n          id: choice.name,\n          value: choice.name,\n          onChange: changeRadioHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 44\n    }, this), data.inputType !== \"radio\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: data.inputs[0].inputType,\n        placeholder: data.inputs[0].placeholder,\n        onChange: e => setInputValue({\n          input1: e.target.value\n        }),\n        value: inputValue.input1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), data.inputs[1] && /*#__PURE__*/_jsxDEV(\"input\", {\n        type: data.inputs[1].inputType,\n        placeholder: data.inputs[1].placeholder,\n        onChange: e => setInputValue({\n          input2: e.target.value\n        }),\n        value: inputValue.input2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Footer, {\n      data: data,\n      numberOfQuestions: numberOfQuestions,\n      error: error,\n      setError: setError,\n      activeQuestion: activeQuestion,\n      onSetActiveQuestion: setActiveQuestion,\n      selected: selected,\n      setSelected: setSelected,\n      inputValue: inputValue,\n      setInputValue: setInputValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Compteur, {\n      activeQuestion: activeQuestion,\n      numberOfQuestions: numberOfQuestions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Questions, \"/n22tfWdfTDzqPuRqXDDtRZxouM=\");\n\n_c = Questions;\nexport default Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"sources":["C:/Users/raymo/Desktop/atem-main/src/components/Pages/Questions/Components/Questions.jsx"],"names":["React","useRef","useState","questionsData","Footer","Compteur","Questions","activeQuestion","setActiveQuestion","data","length","choices","numberOfQuestions","selected","setSelected","error","setError","inputValue","setInputValue","input1","input2","radiosWrapper","changeRadioHandler","e","target","value","titre","description","inputType","map","choice","index","name","image","inputs","placeholder"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react'\r\nimport './Questions.css'\r\nimport questionsData from '../Data/data.json'\r\nimport { Footer } from './Footer'\r\nimport Compteur from './Compteur'\r\n\r\nconst Questions = () => {\r\n\r\n    const [activeQuestion, setActiveQuestion] = useState(0);\r\n    const data = questionsData.data[activeQuestion]\r\n    const length = data.choices.length\r\n    const numberOfQuestions = questionsData.data.length\r\n\r\n    const [selected, setSelected] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [inputValue, setInputValue] = useState({\r\n        input1: \"\",\r\n        input2:\"\"\r\n    })\r\n    const radiosWrapper = useRef();\r\n  \r\n    \r\n\r\n    // useEffect(() => {\r\n    //   const findCheckedInput = data.inputType === \"radio\" && radiosWrapper.current.querySelector('input:checked');\r\n    //   if(findCheckedInput) {\r\n    //     findCheckedInput.checked = false;\r\n    //   }\r\n    // }, [data]);\r\n  \r\n    const changeRadioHandler = (e) => {\r\n        setSelected(e.target.value);\r\n        if(error) {\r\n            setError('');\r\n        }\r\n    };\r\n\r\n    // const changeInputHandler = (e) => {\r\n    //     setInputValue([\r\n    //         {input: e.target.value},\r\n    //         {input: e.target.value}\r\n    //     ]);\r\n    //     if(error) {\r\n    //         setError('');\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        \r\n        <form className='formulaire'>\r\n            <div className='question__title'>\r\n                <h2>{data.titre}</h2>\r\n                {data.description && <p>{data.description}</p>}\r\n            </div>\r\n\r\n            {/* input radio */}\r\n            {data.inputType === \"radio\" && <div className={`${length === 2 ? 'question__choices' : 'question__choices--small-card'} control`} ref={radiosWrapper}>\r\n                {data.choices.map((choice, index) => (\r\n                    <div className={`${length === 2 ? 'question__choices__choice' : 'question__choices__choice--small-card'}`} key={index}>\r\n                        <label htmlFor={choice.name}>\r\n                            {choice.image && <img className='radio-image' src={choice.image} alt={choice.name}/>}\r\n                            <p>{choice.name}</p>\r\n                        </label>\r\n                        <input className='radio' type=\"radio\" name=\"answer\" id={choice.name} value={choice.name} onChange={changeRadioHandler} />\r\n                    </div>\r\n                ))}\r\n            </div>}\r\n\r\n            {/* input type text, number */}\r\n            {/*data.inputType !== \"radio\" && data.inputs.map((element, index) => (\r\n                    <input className='test' type={element.inputType} placeholder={element.placeholder} key={index}/>\r\n            ))*/}\r\n            {data.inputType !== \"radio\" && (\r\n                <>\r\n                    <input type={data.inputs[0].inputType} placeholder={data.inputs[0].placeholder} onChange={e => setInputValue({input1: e.target.value})}value={inputValue.input1} />\r\n                    {data.inputs[1] && <input type={data.inputs[1].inputType} placeholder={data.inputs[1].placeholder} onChange={e => setInputValue({input2: e.target.value})}value={inputValue.input2}/>}\r\n                </>\r\n            )}\r\n            \r\n            <Footer data={data} numberOfQuestions={numberOfQuestions} error={error} setError={setError} activeQuestion={activeQuestion} onSetActiveQuestion={setActiveQuestion} selected={selected} setSelected={setSelected} inputValue={inputValue} setInputValue={setInputValue}/>\r\n\r\n            <Compteur activeQuestion={activeQuestion} numberOfQuestions={numberOfQuestions}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Questions"]},"metadata":{},"sourceType":"module"}